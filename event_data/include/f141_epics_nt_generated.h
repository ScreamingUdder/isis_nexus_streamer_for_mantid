// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_
#define FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_

#include "flatbuffers/flatbuffers.h"


namespace BrightnESS {
namespace FlatBufs {
namespace f141_epics_nt {

struct timeStamp_t;
struct NTScalarByte;
struct NTScalarUByte;
struct NTScalarShort;
struct NTScalarUShort;
struct NTScalarInt;
struct NTScalarUInt;
struct NTScalarLong;
struct NTScalarULong;
struct NTScalarFloat;
struct NTScalarDouble;
struct NTScalarArrayByte;
struct NTScalarArrayUByte;
struct NTScalarArrayShort;
struct NTScalarArrayUShort;
struct NTScalarArrayInt;
struct NTScalarArrayUInt;
struct NTScalarArrayLong;
struct NTScalarArrayULong;
struct NTScalarArrayFloat;
struct NTScalarArrayDouble;
struct fwdinfo_t;
struct fwdinfo_2_t;
struct EpicsPV;

enum PV {
  PV_NONE = 0,
  PV_NTScalarByte = 1,
  PV_NTScalarUByte = 2,
  PV_NTScalarShort = 3,
  PV_NTScalarUShort = 4,
  PV_NTScalarInt = 5,
  PV_NTScalarUInt = 6,
  PV_NTScalarLong = 7,
  PV_NTScalarULong = 8,
  PV_NTScalarFloat = 9,
  PV_NTScalarDouble = 10,
  PV_NTScalarArrayByte = 11,
  PV_NTScalarArrayUByte = 12,
  PV_NTScalarArrayShort = 13,
  PV_NTScalarArrayUShort = 14,
  PV_NTScalarArrayInt = 15,
  PV_NTScalarArrayUInt = 16,
  PV_NTScalarArrayLong = 17,
  PV_NTScalarArrayULong = 18,
  PV_NTScalarArrayFloat = 19,
  PV_NTScalarArrayDouble = 20,
  PV_MIN = PV_NONE,
  PV_MAX = PV_NTScalarArrayDouble
};

inline const char **EnumNamesPV() {
  static const char *names[] = { "NONE", "NTScalarByte", "NTScalarUByte", "NTScalarShort", "NTScalarUShort", "NTScalarInt", "NTScalarUInt", "NTScalarLong", "NTScalarULong", "NTScalarFloat", "NTScalarDouble", "NTScalarArrayByte", "NTScalarArrayUByte", "NTScalarArrayShort", "NTScalarArrayUShort", "NTScalarArrayInt", "NTScalarArrayUInt", "NTScalarArrayLong", "NTScalarArrayULong", "NTScalarArrayFloat", "NTScalarArrayDouble", nullptr };
  return names;
}

inline const char *EnumNamePV(PV e) { return EnumNamesPV()[static_cast<int>(e)]; }

inline bool VerifyPV(flatbuffers::Verifier &verifier, const void *union_obj, PV type);

enum fwdinfo_u {
  fwdinfo_u_NONE = 0,
  fwdinfo_u_fwdinfo_2_t = 1,
  fwdinfo_u_MIN = fwdinfo_u_NONE,
  fwdinfo_u_MAX = fwdinfo_u_fwdinfo_2_t
};

inline const char **EnumNamesfwdinfo_u() {
  static const char *names[] = { "NONE", "fwdinfo_2_t", nullptr };
  return names;
}

inline const char *EnumNamefwdinfo_u(fwdinfo_u e) { return EnumNamesfwdinfo_u()[static_cast<int>(e)]; }

inline bool Verifyfwdinfo_u(flatbuffers::Verifier &verifier, const void *union_obj, fwdinfo_u type);

MANUALLY_ALIGNED_STRUCT(8) timeStamp_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t secondsPastEpoch_;
  int32_t nanoseconds_;
  int32_t __padding0;

 public:
  timeStamp_t(uint64_t _secondsPastEpoch, int32_t _nanoseconds)
    : secondsPastEpoch_(flatbuffers::EndianScalar(_secondsPastEpoch)), nanoseconds_(flatbuffers::EndianScalar(_nanoseconds)), __padding0(0) { (void)__padding0; }

  uint64_t secondsPastEpoch() const { return flatbuffers::EndianScalar(secondsPastEpoch_); }
  int32_t nanoseconds() const { return flatbuffers::EndianScalar(nanoseconds_); }
};
STRUCT_END(timeStamp_t, 16);

MANUALLY_ALIGNED_STRUCT(8) fwdinfo_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t seq_;
  uint64_t ts_data_;
  uint64_t ts_fwd_;
  uint8_t fwdix_;
  int8_t __padding0;
  int16_t __padding1;
  int32_t __padding2;
  uint64_t teamid_;

 public:
  fwdinfo_t(uint64_t _seq, uint64_t _ts_data, uint64_t _ts_fwd, uint8_t _fwdix, uint64_t _teamid)
    : seq_(flatbuffers::EndianScalar(_seq)), ts_data_(flatbuffers::EndianScalar(_ts_data)), ts_fwd_(flatbuffers::EndianScalar(_ts_fwd)), fwdix_(flatbuffers::EndianScalar(_fwdix)), __padding0(0), __padding1(0), __padding2(0), teamid_(flatbuffers::EndianScalar(_teamid)) { (void)__padding0; (void)__padding1; (void)__padding2; }

  uint64_t seq() const { return flatbuffers::EndianScalar(seq_); }
  uint64_t ts_data() const { return flatbuffers::EndianScalar(ts_data_); }
  uint64_t ts_fwd() const { return flatbuffers::EndianScalar(ts_fwd_); }
  uint8_t fwdix() const { return flatbuffers::EndianScalar(fwdix_); }
  uint64_t teamid() const { return flatbuffers::EndianScalar(teamid_); }
};
STRUCT_END(fwdinfo_t, 40);

struct NTScalarByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int8_t value() const { return GetField<int8_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int8_t value) { fbb_.AddElement<int8_t>(NTScalarByte::VT_VALUE, value, 0); }
  NTScalarByteBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarByteBuilder &operator=(const NTScalarByteBuilder &);
  flatbuffers::Offset<NTScalarByte> Finish() {
    auto o = flatbuffers::Offset<NTScalarByte>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarByte> CreateNTScalarByte(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t value = 0) {
  NTScalarByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint8_t value() const { return GetField<uint8_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarUByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(NTScalarUByte::VT_VALUE, value, 0); }
  NTScalarUByteBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarUByteBuilder &operator=(const NTScalarUByteBuilder &);
  flatbuffers::Offset<NTScalarUByte> Finish() {
    auto o = flatbuffers::Offset<NTScalarUByte>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarUByte> CreateNTScalarUByte(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t value = 0) {
  NTScalarUByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int16_t value() const { return GetField<int16_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int16_t value) { fbb_.AddElement<int16_t>(NTScalarShort::VT_VALUE, value, 0); }
  NTScalarShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarShortBuilder &operator=(const NTScalarShortBuilder &);
  flatbuffers::Offset<NTScalarShort> Finish() {
    auto o = flatbuffers::Offset<NTScalarShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarShort> CreateNTScalarShort(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t value = 0) {
  NTScalarShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint16_t value() const { return GetField<uint16_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarUShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) { fbb_.AddElement<uint16_t>(NTScalarUShort::VT_VALUE, value, 0); }
  NTScalarUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarUShortBuilder &operator=(const NTScalarUShortBuilder &);
  flatbuffers::Offset<NTScalarUShort> Finish() {
    auto o = flatbuffers::Offset<NTScalarUShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarUShort> CreateNTScalarUShort(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t value = 0) {
  NTScalarUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int32_t value() const { return GetField<int32_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) { fbb_.AddElement<int32_t>(NTScalarInt::VT_VALUE, value, 0); }
  NTScalarIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarIntBuilder &operator=(const NTScalarIntBuilder &);
  flatbuffers::Offset<NTScalarInt> Finish() {
    auto o = flatbuffers::Offset<NTScalarInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarInt> CreateNTScalarInt(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t value = 0) {
  NTScalarIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint32_t value() const { return GetField<uint32_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarUIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) { fbb_.AddElement<uint32_t>(NTScalarUInt::VT_VALUE, value, 0); }
  NTScalarUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarUIntBuilder &operator=(const NTScalarUIntBuilder &);
  flatbuffers::Offset<NTScalarUInt> Finish() {
    auto o = flatbuffers::Offset<NTScalarUInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarUInt> CreateNTScalarUInt(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t value = 0) {
  NTScalarUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarLong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int64_t value() const { return GetField<int64_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarLongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int64_t value) { fbb_.AddElement<int64_t>(NTScalarLong::VT_VALUE, value, 0); }
  NTScalarLongBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarLongBuilder &operator=(const NTScalarLongBuilder &);
  flatbuffers::Offset<NTScalarLong> Finish() {
    auto o = flatbuffers::Offset<NTScalarLong>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarLong> CreateNTScalarLong(flatbuffers::FlatBufferBuilder &_fbb,
   int64_t value = 0) {
  NTScalarLongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarULong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint64_t value() const { return GetField<uint64_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarULongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) { fbb_.AddElement<uint64_t>(NTScalarULong::VT_VALUE, value, 0); }
  NTScalarULongBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarULongBuilder &operator=(const NTScalarULongBuilder &);
  flatbuffers::Offset<NTScalarULong> Finish() {
    auto o = flatbuffers::Offset<NTScalarULong>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarULong> CreateNTScalarULong(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t value = 0) {
  NTScalarULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  float value() const { return GetField<float>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarFloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) { fbb_.AddElement<float>(NTScalarFloat::VT_VALUE, value, 0); }
  NTScalarFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarFloatBuilder &operator=(const NTScalarFloatBuilder &);
  flatbuffers::Offset<NTScalarFloat> Finish() {
    auto o = flatbuffers::Offset<NTScalarFloat>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarFloat> CreateNTScalarFloat(flatbuffers::FlatBufferBuilder &_fbb,
   float value = 0) {
  NTScalarFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  double value() const { return GetField<double>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct NTScalarDoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) { fbb_.AddElement<double>(NTScalarDouble::VT_VALUE, value, 0); }
  NTScalarDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarDoubleBuilder &operator=(const NTScalarDoubleBuilder &);
  flatbuffers::Offset<NTScalarDouble> Finish() {
    auto o = flatbuffers::Offset<NTScalarDouble>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarDouble> CreateNTScalarDouble(flatbuffers::FlatBufferBuilder &_fbb,
   double value = 0) {
  NTScalarDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int8_t> *value() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int8_t>> value) { fbb_.AddOffset(NTScalarArrayByte::VT_VALUE, value); }
  NTScalarArrayByteBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayByteBuilder &operator=(const NTScalarArrayByteBuilder &);
  flatbuffers::Offset<NTScalarArrayByte> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayByte>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayByte> CreateNTScalarArrayByte(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> value = 0) {
  NTScalarArrayByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayUByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint8_t> *value() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) { fbb_.AddOffset(NTScalarArrayUByte::VT_VALUE, value); }
  NTScalarArrayUByteBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayUByteBuilder &operator=(const NTScalarArrayUByteBuilder &);
  flatbuffers::Offset<NTScalarArrayUByte> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayUByte>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayUByte> CreateNTScalarArrayUByte(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  NTScalarArrayUByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int16_t> *value() const { return GetPointer<const flatbuffers::Vector<int16_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int16_t>> value) { fbb_.AddOffset(NTScalarArrayShort::VT_VALUE, value); }
  NTScalarArrayShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayShortBuilder &operator=(const NTScalarArrayShortBuilder &);
  flatbuffers::Offset<NTScalarArrayShort> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayShort> CreateNTScalarArrayShort(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int16_t>> value = 0) {
  NTScalarArrayShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint16_t> *value() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> value) { fbb_.AddOffset(NTScalarArrayUShort::VT_VALUE, value); }
  NTScalarArrayUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayUShortBuilder &operator=(const NTScalarArrayUShortBuilder &);
  flatbuffers::Offset<NTScalarArrayUShort> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayUShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayUShort> CreateNTScalarArrayUShort(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> value = 0) {
  NTScalarArrayUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int32_t> *value() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int32_t>> value) { fbb_.AddOffset(NTScalarArrayInt::VT_VALUE, value); }
  NTScalarArrayIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayIntBuilder &operator=(const NTScalarArrayIntBuilder &);
  flatbuffers::Offset<NTScalarArrayInt> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayInt> CreateNTScalarArrayInt(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> value = 0) {
  NTScalarArrayIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint32_t> *value() const { return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> value) { fbb_.AddOffset(NTScalarArrayUInt::VT_VALUE, value); }
  NTScalarArrayUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayUIntBuilder &operator=(const NTScalarArrayUIntBuilder &);
  flatbuffers::Offset<NTScalarArrayUInt> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayUInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayUInt> CreateNTScalarArrayUInt(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint32_t>> value = 0) {
  NTScalarArrayUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayLong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<int64_t> *value() const { return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayLongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<int64_t>> value) { fbb_.AddOffset(NTScalarArrayLong::VT_VALUE, value); }
  NTScalarArrayLongBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayLongBuilder &operator=(const NTScalarArrayLongBuilder &);
  flatbuffers::Offset<NTScalarArrayLong> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayLong>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayLong> CreateNTScalarArrayLong(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int64_t>> value = 0) {
  NTScalarArrayLongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayULong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint64_t> *value() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayULongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> value) { fbb_.AddOffset(NTScalarArrayULong::VT_VALUE, value); }
  NTScalarArrayULongBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayULongBuilder &operator=(const NTScalarArrayULongBuilder &);
  flatbuffers::Offset<NTScalarArrayULong> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayULong>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayULong> CreateNTScalarArrayULong(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint64_t>> value = 0) {
  NTScalarArrayULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<float> *value() const { return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayFloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<float>> value) { fbb_.AddOffset(NTScalarArrayFloat::VT_VALUE, value); }
  NTScalarArrayFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayFloatBuilder &operator=(const NTScalarArrayFloatBuilder &);
  flatbuffers::Offset<NTScalarArrayFloat> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayFloat>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayFloat> CreateNTScalarArrayFloat(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<float>> value = 0) {
  NTScalarArrayFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<double> *value() const { return GetPointer<const flatbuffers::Vector<double> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayDoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<double>> value) { fbb_.AddOffset(NTScalarArrayDouble::VT_VALUE, value); }
  NTScalarArrayDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NTScalarArrayDoubleBuilder &operator=(const NTScalarArrayDoubleBuilder &);
  flatbuffers::Offset<NTScalarArrayDouble> Finish() {
    auto o = flatbuffers::Offset<NTScalarArrayDouble>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NTScalarArrayDouble> CreateNTScalarArrayDouble(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<double>> value = 0) {
  NTScalarArrayDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct fwdinfo_2_t FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SEQ_DATA = 4,
    VT_SEQ_FWD = 6,
    VT_TS_DATA = 8,
    VT_TS_FWD = 10,
    VT_FWDIX = 12,
    VT_TEAMID = 14
  };
  uint64_t seq_data() const { return GetField<uint64_t>(VT_SEQ_DATA, 0); }
  uint64_t seq_fwd() const { return GetField<uint64_t>(VT_SEQ_FWD, 0); }
  uint64_t ts_data() const { return GetField<uint64_t>(VT_TS_DATA, 0); }
  uint64_t ts_fwd() const { return GetField<uint64_t>(VT_TS_FWD, 0); }
  uint32_t fwdix() const { return GetField<uint32_t>(VT_FWDIX, 0); }
  uint64_t teamid() const { return GetField<uint64_t>(VT_TEAMID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_DATA) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_FWD) &&
           VerifyField<uint64_t>(verifier, VT_TS_DATA) &&
           VerifyField<uint64_t>(verifier, VT_TS_FWD) &&
           VerifyField<uint32_t>(verifier, VT_FWDIX) &&
           VerifyField<uint64_t>(verifier, VT_TEAMID) &&
           verifier.EndTable();
  }
};

struct fwdinfo_2_tBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seq_data(uint64_t seq_data) { fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_SEQ_DATA, seq_data, 0); }
  void add_seq_fwd(uint64_t seq_fwd) { fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_SEQ_FWD, seq_fwd, 0); }
  void add_ts_data(uint64_t ts_data) { fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TS_DATA, ts_data, 0); }
  void add_ts_fwd(uint64_t ts_fwd) { fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TS_FWD, ts_fwd, 0); }
  void add_fwdix(uint32_t fwdix) { fbb_.AddElement<uint32_t>(fwdinfo_2_t::VT_FWDIX, fwdix, 0); }
  void add_teamid(uint64_t teamid) { fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TEAMID, teamid, 0); }
  fwdinfo_2_tBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  fwdinfo_2_tBuilder &operator=(const fwdinfo_2_tBuilder &);
  flatbuffers::Offset<fwdinfo_2_t> Finish() {
    auto o = flatbuffers::Offset<fwdinfo_2_t>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<fwdinfo_2_t> Createfwdinfo_2_t(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t seq_data = 0,
   uint64_t seq_fwd = 0,
   uint64_t ts_data = 0,
   uint64_t ts_fwd = 0,
   uint32_t fwdix = 0,
   uint64_t teamid = 0) {
  fwdinfo_2_tBuilder builder_(_fbb);
  builder_.add_teamid(teamid);
  builder_.add_ts_fwd(ts_fwd);
  builder_.add_ts_data(ts_data);
  builder_.add_seq_fwd(seq_fwd);
  builder_.add_seq_data(seq_data);
  builder_.add_fwdix(fwdix);
  return builder_.Finish();
}

struct EpicsPV FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PV_TYPE = 6,
    VT_PV = 8,
    VT_TIMESTAMP = 10,
    VT_FWDINFO = 12,
    VT_FWDINFO2_TYPE = 14,
    VT_FWDINFO2 = 16
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  PV pv_type() const { return static_cast<PV>(GetField<uint8_t>(VT_PV_TYPE, 0)); }
  const void *pv() const { return GetPointer<const void *>(VT_PV); }
  const timeStamp_t *timeStamp() const { return GetStruct<const timeStamp_t *>(VT_TIMESTAMP); }
  const fwdinfo_t *fwdinfo() const { return GetStruct<const fwdinfo_t *>(VT_FWDINFO); }
  fwdinfo_u fwdinfo2_type() const { return static_cast<fwdinfo_u>(GetField<uint8_t>(VT_FWDINFO2_TYPE, 0)); }
  const void *fwdinfo2() const { return GetPointer<const void *>(VT_FWDINFO2); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, VT_PV_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PV) &&
           VerifyPV(verifier, pv(), pv_type()) &&
           VerifyField<timeStamp_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<fwdinfo_t>(verifier, VT_FWDINFO) &&
           VerifyField<uint8_t>(verifier, VT_FWDINFO2_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FWDINFO2) &&
           Verifyfwdinfo_u(verifier, fwdinfo2(), fwdinfo2_type()) &&
           verifier.EndTable();
  }
};

struct EpicsPVBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(EpicsPV::VT_NAME, name); }
  void add_pv_type(PV pv_type) { fbb_.AddElement<uint8_t>(EpicsPV::VT_PV_TYPE, static_cast<uint8_t>(pv_type), 0); }
  void add_pv(flatbuffers::Offset<void> pv) { fbb_.AddOffset(EpicsPV::VT_PV, pv); }
  void add_timeStamp(const timeStamp_t *timeStamp) { fbb_.AddStruct(EpicsPV::VT_TIMESTAMP, timeStamp); }
  void add_fwdinfo(const fwdinfo_t *fwdinfo) { fbb_.AddStruct(EpicsPV::VT_FWDINFO, fwdinfo); }
  void add_fwdinfo2_type(fwdinfo_u fwdinfo2_type) { fbb_.AddElement<uint8_t>(EpicsPV::VT_FWDINFO2_TYPE, static_cast<uint8_t>(fwdinfo2_type), 0); }
  void add_fwdinfo2(flatbuffers::Offset<void> fwdinfo2) { fbb_.AddOffset(EpicsPV::VT_FWDINFO2, fwdinfo2); }
  EpicsPVBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EpicsPVBuilder &operator=(const EpicsPVBuilder &);
  flatbuffers::Offset<EpicsPV> Finish() {
    auto o = flatbuffers::Offset<EpicsPV>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<EpicsPV> CreateEpicsPV(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   PV pv_type = PV_NONE,
   flatbuffers::Offset<void> pv = 0,
   const timeStamp_t *timeStamp = 0,
   const fwdinfo_t *fwdinfo = 0,
   fwdinfo_u fwdinfo2_type = fwdinfo_u_NONE,
   flatbuffers::Offset<void> fwdinfo2 = 0) {
  EpicsPVBuilder builder_(_fbb);
  builder_.add_fwdinfo2(fwdinfo2);
  builder_.add_fwdinfo(fwdinfo);
  builder_.add_timeStamp(timeStamp);
  builder_.add_pv(pv);
  builder_.add_name(name);
  builder_.add_fwdinfo2_type(fwdinfo2_type);
  builder_.add_pv_type(pv_type);
  return builder_.Finish();
}

inline bool VerifyPV(flatbuffers::Verifier &verifier, const void *union_obj, PV type) {
  switch (type) {
    case PV_NONE: return true;
    case PV_NTScalarByte: return verifier.VerifyTable(reinterpret_cast<const NTScalarByte *>(union_obj));
    case PV_NTScalarUByte: return verifier.VerifyTable(reinterpret_cast<const NTScalarUByte *>(union_obj));
    case PV_NTScalarShort: return verifier.VerifyTable(reinterpret_cast<const NTScalarShort *>(union_obj));
    case PV_NTScalarUShort: return verifier.VerifyTable(reinterpret_cast<const NTScalarUShort *>(union_obj));
    case PV_NTScalarInt: return verifier.VerifyTable(reinterpret_cast<const NTScalarInt *>(union_obj));
    case PV_NTScalarUInt: return verifier.VerifyTable(reinterpret_cast<const NTScalarUInt *>(union_obj));
    case PV_NTScalarLong: return verifier.VerifyTable(reinterpret_cast<const NTScalarLong *>(union_obj));
    case PV_NTScalarULong: return verifier.VerifyTable(reinterpret_cast<const NTScalarULong *>(union_obj));
    case PV_NTScalarFloat: return verifier.VerifyTable(reinterpret_cast<const NTScalarFloat *>(union_obj));
    case PV_NTScalarDouble: return verifier.VerifyTable(reinterpret_cast<const NTScalarDouble *>(union_obj));
    case PV_NTScalarArrayByte: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayByte *>(union_obj));
    case PV_NTScalarArrayUByte: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayUByte *>(union_obj));
    case PV_NTScalarArrayShort: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayShort *>(union_obj));
    case PV_NTScalarArrayUShort: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayUShort *>(union_obj));
    case PV_NTScalarArrayInt: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayInt *>(union_obj));
    case PV_NTScalarArrayUInt: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayUInt *>(union_obj));
    case PV_NTScalarArrayLong: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayLong *>(union_obj));
    case PV_NTScalarArrayULong: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayULong *>(union_obj));
    case PV_NTScalarArrayFloat: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayFloat *>(union_obj));
    case PV_NTScalarArrayDouble: return verifier.VerifyTable(reinterpret_cast<const NTScalarArrayDouble *>(union_obj));
    default: return false;
  }
}

inline bool Verifyfwdinfo_u(flatbuffers::Verifier &verifier, const void *union_obj, fwdinfo_u type) {
  switch (type) {
    case fwdinfo_u_NONE: return true;
    case fwdinfo_u_fwdinfo_2_t: return verifier.VerifyTable(reinterpret_cast<const fwdinfo_2_t *>(union_obj));
    default: return false;
  }
}

inline const BrightnESS::FlatBufs::f141_epics_nt::EpicsPV *GetEpicsPV(const void *buf) { return flatbuffers::GetRoot<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(buf); }

inline bool VerifyEpicsPVBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(); }

inline const char *EpicsPVIdentifier() { return "f141"; }

inline bool EpicsPVBufferHasIdentifier(const void *buf) { return flatbuffers::BufferHasIdentifier(buf, EpicsPVIdentifier()); }

inline void FinishEpicsPVBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV> root) { fbb.Finish(root, EpicsPVIdentifier()); }

}  // namespace f141_epics_nt
}  // namespace FlatBufs
}  // namespace BrightnESS

#endif  // FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_
